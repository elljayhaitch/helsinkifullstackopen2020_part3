{"version":3,"sources":["components/filter.js","services/personsService.js","components/personForm.js","components/person.js","components/persons.js","components/notification.js","index.js"],"names":["Filter","filter","setFilter","value","onChange","event","target","personsService","getAll","axios","get","then","response","console","log","data","create","newPerson","post","remove","id","delete","status","update","put","personMatch","person","newName","name","toUpperCase","PersonForm","setNewName","newNumber","setNewNumber","persons","setPersons","setNotification","type","onClick","preventDefault","some","number","alert","window","confirm","updated","newPersons","map","p","catch","error","updatePerson","saved","concat","createPerson","Person","removePerson","Persons","includes","key","Notification","message","notificationClass","className","ReactDOM","render","useState","setMessage","errorMessage","setErrorMessage","useEffect","results","notification","setTimeout","personFormProps","document","getElementById"],"mappings":"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","file":"static/js/main.c239c8bd.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = ({filter, setFilter}) => (\n\t<div>filter shown with \n\t\t<input value={filter} onChange={event => setFilter(event.target.value)} />\n\t</div>\n);\n\nexport default Filter;","import axios from 'axios'\n\nconst personsBaseUrl = '/api/persons';\n\nconst getAll = () => {\n\tconst request = axios.get(personsBaseUrl);\n\treturn request.then(response => {\n\t\tconsole.log(response);\n\t\treturn response.data;\n\t});\n};\n\nconst create = newPerson => {\n\tconst request = axios.post(personsBaseUrl, newPerson);\n\treturn request.then(response => response.data);\n};\n\nconst remove = id => {\n\tconst request = axios.delete(`${personsBaseUrl}/${id}`);\n\treturn request.then(response => response.status);\n};\n\nconst update = newPerson => {\n\tconst request = axios.put(`${personsBaseUrl}/${newPerson.id}`, newPerson);\n\treturn request.then(response => response.data);\n};\n\nconst personsService = { getAll, create, remove, update };\n\nexport default personsService;\n\n","import React from 'react';\nimport personsService from '../services/personsService';\n\nconst personMatch = (person, newName) => person.name.toUpperCase() === newName.toUpperCase();\n\nconst updatePerson = (newName, setNewName, newNumber, setNewNumber, persons, setPersons, setNotification) => {\n\tconst person = persons.filter(person => personMatch(person, newName))[0];\n\n\tif (person.number === newNumber) {\n\t\talert(`${newName} is already added to phonebook`);\n\t} else if (window.confirm(`${person.name} is already added to phonebook, replace the old number with a new one?`)) {\t\t\t\n\t\tpersonsService\n\t\t.update({...person, number: newNumber})\n\t\t.then(updated => {\n\t\t  \tconst newPersons = persons.map(p => p.id !== person.id ? p : updated);\n\t\t    setPersons(newPersons);\n\t\t    setNewName('');\n\t\t\tsetNewNumber('');\n\t\t\tsetNotification(`Updated ${newName}`);\n\t\t})\n\t\t.catch(error => setNotification('could not update', true));\n\t}\n};\n\nconst createPerson = (newName, setNewName, newNumber, setNewNumber, persons, setPersons, setNotification) => {\t\n\tpersonsService\n\t\t.create({ name: newName, number: newNumber })\n\t\t.then(saved => {\n\t\t  \tconst newPersons = persons.concat(saved);\n\t\t    setPersons(newPersons);\n\t\t    setNewName('');\n\t\t\tsetNewNumber('');\n\t\t\tsetNotification(`Added ${newName}`);\n\t\t})\n\t\t.catch(error => setNotification('could not create', true));\n};\n\nconst PersonForm = ({newName, setNewName, newNumber, setNewNumber, persons, setPersons, setNotification}) => {\n\tconst onClick = event => {\n\t\tevent.preventDefault();\n\n\t\tif (persons.some(person => personMatch(person, newName))) {\n\t\t\tupdatePerson(newName, setNewName, newNumber, setNewNumber, persons, setPersons, setNotification);\n\t\t} else {\n\t\t\tcreatePerson(newName, setNewName, newNumber, setNewNumber, persons, setPersons, setNotification);\n\t\t}\n\t};\n\n\treturn (\n\t\t<form>\n\t        <div>\n\t          name: \n\t          <input \n\t          value={newName}\n\t          onChange={event => setNewName(event.target.value)}\n\t          />\n\t        </div>\n\n\t        <div>\n\t          number: \n\t          <input \n\t          value={newNumber}\n\t          onChange={event => setNewNumber(event.target.value)}\n\t          />\n\t        </div>\n\n\t        <div>\n\t          <button type=\"submit\" onClick={onClick}>add</button>\n\t        </div>\n\t      </form>\n\t);\n};\n\nexport default PersonForm;","import React from 'react';\nimport personsService from '../services/personsService'\n\nconst removePerson = (person, persons, setPersons, setNotification) => {\n\tif (window.confirm(`Delete ${person.name}?`)) { \n\t\tpersonsService\n\t\t.remove(person.id)\n\t\t.then(status => {\n\t\t  \tconst newPersons = persons.filter(p => p.id !== person.id);\n\t\t\tsetPersons(newPersons);\n\t\t\tsetNotification(`Deleted ${person.name}`);\n\t\t})\n\t\t.catch(error => setNotification(`Information of ${person.name} has already been removed from server`, true));\n\t}\n};\n\nconst Person = ({person, persons, setPersons, setNotification}) => (\n\t<div>\n\t\t{person.name} {person.number}\n\t\t<button onClick={() => removePerson(person, persons, setPersons, setNotification)}>delete</button>\n\t</div>\n);\n\nexport default Person;","import React from 'react';\nimport Person from './person';\n\nconst Persons = ({persons, filter, setPersons, setNotification}) => (\n\t<div>\n\t\t{persons\n\t      \t.filter(person => person.name.toUpperCase().includes(filter.toUpperCase()))\n\t      \t.map(person => <Person key={person.name} person={person} persons={persons} setPersons={setPersons} setNotification={setNotification} />)}\n\t</div>\n);\n\nexport default Persons;","import React from 'react';\n\nconst Notification = ({message, notificationClass}) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className={notificationClass}>\n        {message}\n      </div>\n    )\n  }\n\n  export default Notification;","import React, {useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Filter from './components/filter';\nimport PersonForm from './components/personForm';\nimport Persons from './components/persons';\nimport Notification from './components/notification';\nimport personsService from './services/personsService'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]);\n  const [ newName, setNewName ] = useState('');\n  const [ newNumber, setNewNumber ] = useState('');\n  const [ filter, setFilter ] = useState('');\n  const [ message, setMessage ] = useState(null);\n  const [ errorMessage, setErrorMessage ] = useState(null);\n\n  const getAllHook = () => {\n    personsService\n      .getAll()\n      .then(results => setPersons(results))\n      .catch(error => setNotification('could not get all', true));\n  };\n  useEffect(getAllHook, [])\n\n  const setNotification = (notification, error) => {\n    if (error) {\n      setErrorMessage(notification);\n      setTimeout(() => setErrorMessage(null), 5000);\n    } else {\n      setMessage(notification);\n      setTimeout(() => setMessage(null), 5000);\n    }\n  }\n\n  const personFormProps = { newName, setNewName, newNumber, setNewNumber, persons, setPersons, setNotification };\n\n\treturn (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} notificationClass=\"notification\"/>\n      <Notification message={errorMessage} notificationClass=\"error\"/>\n      <Filter filter={filter} setFilter={setFilter} />\n\n      <h3>add a new</h3>\n      <PersonForm {...personFormProps} />\n\n      <h3>Numbers</h3>\n      <Persons persons={persons} filter={filter} setPersons={setPersons} setNotification={setNotification} />\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}